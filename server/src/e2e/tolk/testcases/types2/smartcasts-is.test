========================================================================
Empty test
========================================================================
//
------------------------------------------------------------------------
ok

========================================================================
If smartcast to non nullable value with !is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : null;

    if (value !is null) {
        value
//!     ^ int
    }

    value
//! ^ int?
}
------------------------------------------------------------------------
ok

========================================================================
If smartcast to nullable value with is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : null;

    if (value is null) {
        value
//!     ^ null
    }

    value
//! ^ int?
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast to non nullable value with !is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : null;

    assert (value !is null) throw 10;
//!                               ^ int

    value
//! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast to nullable value with is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : null;

    assert (value is null) throw 10;
//!                              ^ int

    value
//! ^ null
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast union type with is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : true;

    assert (value is int) throw value;
//!                             ^ bool

    value
//! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast union type with !is
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : true;

    assert (value !is int) throw value;
//!                              ^ int

    value
//! ^ bool
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast union type with !is and &&
========================================================================
fun main(cond: bool) {
    val value = cond ? 10 : true;

    assert (value !is int && value !is bool) throw value;
//!                                                ^ int | bool

    value
//! ^ bool
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast union type with 3 types with is
========================================================================
fun main(cond: bool) {
    val value: int | bool | slice;

    assert (value is int) throw value;
//!                             ^ bool | slice

    value
//! ^ int
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast union type with 3 types with !is
========================================================================
fun main(cond: bool) {
    val value: int | bool | slice;

    assert (value !is int) throw value;
//!                              ^ int

    value
//! ^ bool | slice
}
------------------------------------------------------------------------
ok

========================================================================
Assert smartcast with is for self
========================================================================
struct Foo {}

fun int | slice.name(self) {
    assert (self is slice) throw 10;

    val some = self;
//!     ^ slice
}
------------------------------------------------------------------------
ok
