========================================================================
Empty test
========================================================================

------------------------------------------------------------------------


========================================================================
Tensor variable declaration
========================================================================
fun main() {
    val (
        first,
        second,
        third
    ) = (100, true, "");
}
------------------------------------------------------------------------
fun main()/* : void */ {
    val (
        first/* : int */,
        second/* : bool */,
        third/* : slice */
    ) = (100, true, "");
}

========================================================================
Tensor variable declaration with trailing comma
========================================================================
fun main() {
    val (
        first,
        second,
        third,
    ) = (100, true, "");
}
------------------------------------------------------------------------
fun main()/* : void */ {
    val (
        first/* : int */,
        second/* : bool */,
        third/* : slice */,
    ) = (100, true, "");
}

========================================================================
Tuple variable declaration
========================================================================
fun main() {
    val [
        first,
        second,
        third
    ] = [100, true, ""];
}
------------------------------------------------------------------------
fun main()/* : void */ {
    val [
        first/* : int */,
        second/* : bool */,
        third/* : slice */
    ] = [100, true, ""];
}

========================================================================
Tuple variable declaration with trailing comma
========================================================================
fun main() {
    val [
        first,
        second,
        third,
    ] = [100, true, ""];
}
------------------------------------------------------------------------
fun main()/* : void */ {
    val [
        first/* : int */,
        second/* : bool */,
        third/* : slice */,
    ] = [100, true, ""];
}

========================================================================
Tensor variable declaration with function init
========================================================================
fun foo(): (int, slice, bool) {}

fun main() {
    val (
        first,
        second,
        third
    ) = foo();
}
------------------------------------------------------------------------
fun foo(): (int, slice, bool) {}

fun main()/* : void */ {
    val (
        first/* : int */,
        second/* : slice */,
        third/* : bool */
    ) = foo();
}

========================================================================
Tuple variable declaration with function init
========================================================================
fun foo(): [int, slice, bool] {}

fun main() {
    val [
        first,
        second,
        third
    ] = foo();
}
------------------------------------------------------------------------
fun foo(): [int, slice, bool] {}

fun main()/* : void */ {
    val [
        first/* : int */,
        second/* : slice */,
        third/* : bool */
    ] = foo();
}

========================================================================
Nested tensor and tuple variable declaration with function init
========================================================================
fun foo(): (int, [[[[slice]]]], [bool, int]) {}

fun main() {
    val (first,
        [[[[second]]]],
        [
            third,
            fourth
        ]
    ) = foo();
}
------------------------------------------------------------------------
fun foo(): (int, [[[[slice]]]], [bool, int]) {}

fun main()/* : void */ {
    val (first/* : int */,
        [[[[second/* : slice */]]]],
        [
            third/* : bool */,
            fourth/* : int */
        ]
    ) = foo();
}

========================================================================
Tensor variable declaration with variable function call
========================================================================
fun foo(): (() -> (int, slice, bool)) {}

fun main() {
    val getter = foo();

    val (
        first,
        second,
        third
    ) = getter();
}
------------------------------------------------------------------------
fun foo(): (() -> (int, slice, bool)) {}

fun main()/* : void */ {
    val getter/* : () -> (int, slice, bool) */ = foo();

    val (
        first/* : int */,
        second/* : slice */,
        third/* : bool */
    ) = getter();
}

========================================================================
Try catch variable hint
========================================================================
fun main() {
    try {} catch (e) {}
}
------------------------------------------------------------------------
fun main()/* : void */ {
    try {} catch (e/* : int */) {}
}

========================================================================
Try catch variable 2 hint
========================================================================
fun main() {
    try {} catch (e, d) {}
}
------------------------------------------------------------------------
fun main()/* : void */ {
    try {} catch (e/* : int */, d) {}
}
